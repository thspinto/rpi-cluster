---
# Source: gloo/templates/2-gloo-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: gloo-system
---
# Source: gloo/templates/3-discovery-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: discovery
  name: discovery
  namespace: gloo-system
---
# Source: gloo/templates/5-gateway-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gateway
  name: gateway
  namespace: gloo-system
---
# Source: gloo/templates/8-gateway-proxy-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
  name: gateway-proxy
  namespace: gloo-system
---
# Source: gloo/templates/12-ingress-proxy-configmap.yaml
# configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-envoy-config
  namespace: gloo-system
  labels:
    app: gloo
    gloo: ingress-proxy
data:

  envoy.yaml: |
    layered_runtime:
      layers:
      - name: static_layer
        static_layer:
          envoy.reloadable_features.enable_deprecated_v2_api: true
          envoy.reloadable_features.disable_tls_inspector_injection: false
          overload:
            global_downstream_max_connections: 250000
      - name: admin_layer
        admin_layer: {}
    node:
      cluster: ingress
      id: "{{.PodName}}.{{.PodNamespace}}"
      metadata:
        # role's value is the key for the in-memory xds cache (projects/gloo/pkg/xds/envoy.go)
        role: "{{.PodNamespace}}~ingress-proxy"
    static_resources:
      clusters:
      - name: xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: xds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo
                    port_value: 9977
        http2_protocol_options: {}
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
      - name: rest_xds_cluster
        alt_stat_name: rest_xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: rest_xds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo
                    port_value: 9976
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true

    dynamic_resources:
      ads_config:
        transport_api_version: V3
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc: {cluster_name: xds_cluster}
      cds_config:
        resource_api_version: V3
        ads: {}
      lds_config:
        resource_api_version: V3
        ads: {}
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 19000
---
# Source: gloo/templates/9-gateway-proxy-configmap.yaml
# config_map
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-proxy-envoy-config
  namespace: gloo-system
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: gateway-proxy
data:

  envoy.yaml: |
    layered_runtime:
      layers:
      - name: static_layer
        static_layer:
          envoy.reloadable_features.enable_deprecated_v2_api: true
          envoy.reloadable_features.disable_tls_inspector_injection: false
          overload:
            global_downstream_max_connections: 250000
          upstream:
            healthy_panic_threshold:
              value: 50
      - name: admin_layer
        admin_layer: {}
    node:
      cluster: gateway
      id: "{{.PodName}}.{{.PodNamespace}}"
      metadata:
        # role's value is the key for the in-memory xds cache (projects/gloo/pkg/xds/envoy.go)
        role: "{{.PodNamespace}}~gateway-proxy"
    static_resources:
      listeners:  
        - name: prometheus_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8081
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: AUTO
                    stat_prefix: prometheus
                    route_config:
                      name: prometheus_route
                      virtual_hosts:
                        - name: prometheus_host
                          domains:
                            - "*"
                          routes:
                            - match:
                                path: "/ready"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                prefix: "/metrics"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                prefix_rewrite: /stats/prometheus
                                cluster: admin_port_cluster
                    http_filters:
                      - name: envoy.filters.http.router  
      clusters:
      - name: gloo.gloo-system.svc.cluster.local:9977
        alt_stat_name: xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: gloo.gloo-system.svc.cluster.local:9977
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.gloo-system.svc.cluster.local
                    port_value: 9977
        http2_protocol_options: {}
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
      - name: rest_xds_cluster
        alt_stat_name: rest_xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: rest_xds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.gloo-system.svc.cluster.local
                    port_value: 9976
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
      - name: wasm-cache
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: wasm-cache
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.gloo-system.svc.cluster.local
                    port_value: 9979
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true   
      - name: admin_port_cluster
        connect_timeout: 5.000s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: admin_port_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 19000 

    dynamic_resources:
      ads_config:
        transport_api_version: V3
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc: {cluster_name: gloo.gloo-system.svc.cluster.local:9977}
      cds_config:
        resource_api_version: V3
        ads: {}
      lds_config:
        resource_api_version: V3
        ads: {}
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 19000
---
# Source: gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: kube-resource-watcher-gloo-system
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: [""]
  resources: ["pods", "services", "secrets", "endpoints", "configmaps", "namespaces"]
  verbs: ["get", "list", "watch"]
---
# Source: gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-upstream-mutator-gloo-system
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: ["gloo.solo.io"]
  resources: ["upstreams"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
# Source: gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-resource-reader-gloo-system
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: ["gloo.solo.io", "enterprise.gloo.solo.io"]
  resources: ["upstreams","upstreamgroups", "proxies", "authconfigs"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["ratelimit.solo.io"]
  resources: ["ratelimitconfigs","ratelimitconfigs/status"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: [""] # get/update on configmaps for recording envoy metrics
  resources: ["configmaps"]
  verbs: ["get", "update"]
---
# Source: gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: settings-user-gloo-system
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: ["gloo.solo.io"]
  resources: ["settings"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "create"]
---
# Source: gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-resource-mutator-gloo-system
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: ["gloo.solo.io"]
  resources: ["proxies"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
# Source: gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gateway-resource-reader-gloo-system
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: ["gateway.solo.io"]
  resources: ["virtualservices", "routetables"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["gateway.solo.io"]
  resources: ["gateways"]
  # update is needed for status updates, create for creating the default ones.
  verbs: ["get", "list", "watch", "create", "update"]
---
# Source: gloo/templates/21-namespace-clusterrole-ingress.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-role-ingress-gloo-system
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: [""]
  resources: ["pods", "services", "secrets", "endpoints", "configmaps"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "create"]
- apiGroups: ["gloo.solo.io", "enterprise.gloo.solo.io"]
  resources: ["settings", "upstreams","upstreamgroups", "proxies","virtualservices", "routetables", "authconfigs"]
  verbs: ["*"]
- apiGroups: ["ratelimit.solo.io"]
  resources: ["ratelimitconfigs","ratelimitconfigs/status"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["extensions", ""]
  resources: ["ingresses", "ingresses/status"]
  verbs: ["*"]
---
# Source: gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-resource-watcher-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: gloo-system
- kind: ServiceAccount
  name: discovery
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: kube-resource-watcher-gloo-system
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-upstream-mutator-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: discovery
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-upstream-mutator-gloo-system
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-resource-reader-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-resource-reader-gloo-system
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: settings-user-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: gloo-system
- kind: ServiceAccount
  name: gateway
  namespace: gloo-system
- kind: ServiceAccount
  name: discovery
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: settings-user-gloo-system
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-resource-mutator-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: gateway
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-resource-mutator-gloo-system
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gateway-resource-reader-binding-gloo-system
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: gateway
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gateway-resource-reader-gloo-system
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/templates/24-namespace-clusterrolebinding-ingress.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-role-binding-ingress-gloo-system
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: default
  namespace: gloo-system
- kind: ServiceAccount
  name: discovery
  namespace: gloo-system
- kind: ServiceAccount
  name: gloo
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-role-ingress-gloo-system
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/templates/13-ingress-proxy-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: ingress-proxy
  name: ingress-proxy
  namespace: gloo-system
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8443
    protocol: TCP
    name: https
  selector:
    gloo: ingress-proxy
  type: LoadBalancer
---
# Source: gloo/templates/2-gloo-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: gloo-system
spec:
  ports:
  - name: grpc-xds
    port: 9977
    protocol: TCP
  - name: rest-xds
    port: 9976
    protocol: TCP
  - name: grpc-validation
    port: 9988
    protocol: TCP
  - name: wasm-cache
    port: 9979
    protocol: TCP
  selector:
    gloo: gloo
---
# Source: gloo/templates/5-gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    discovery.solo.io/function_discovery: disabled
    app: gloo
    gloo: gateway
  name: gateway
  namespace: gloo-system
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    # this should map to projects/gateway/pkg/defaults.ValidationWebhookBindPort
    targetPort: 8443
  selector:
    gloo: gateway
---
# Source: gloo/templates/8-gateway-proxy-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: gateway-proxy
  name: gateway-proxy
  namespace: gloo-system
spec:
  # port order matters due to this issue: https://github.com/solo-io/gloo/issues/2571
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8443
    protocol: TCP
    name: https  
  selector:
    gateway-proxy-id: gateway-proxy
    gateway-proxy: live
  type: LoadBalancer
---
# Source: gloo/templates/1-gloo-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gloo
  template:
    metadata:
      labels:
        gloo: gloo
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      
      serviceAccountName: gloo
      volumes:
      - name: labels-volume
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
      containers:
      - image: thspinto/gloo:1.6.8
        imagePullPolicy: IfNotPresent
        name: gloo
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 9977
          name: grpc-xds
          protocol: TCP
        - containerPort: 9976
          name: rest-xds
          protocol: TCP
        - containerPort: 9988
          name: grpc-validation
          protocol: TCP
        - containerPort: 9979
          name: wasm-cache
          protocol: TCP
        volumeMounts:
        - name: labels-volume
          mountPath: /etc/gloo
          readOnly: true
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: START_STATS_SERVER
            value: "true"
        readinessProbe:
          tcpSocket:
            port: 9977
          initialDelaySeconds: 1
          periodSeconds: 2
          failureThreshold: 10
---
# Source: gloo/templates/10-ingress-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: ingress
  name: ingress
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: ingress
  template:
    metadata:
      labels:
        gloo: ingress
    spec:
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 10101
      containers:
      - image: thspinto/ingress:1.6.8
        imagePullPolicy: IfNotPresent
        name: ingress
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: "KNATIVE_VERSION"
          value: "0.10.0"
---
# Source: gloo/templates/11-ingress-proxy-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: ingress-proxy
  name: ingress-proxy
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: ingress-proxy
  template:
    metadata:
      labels:
        gloo: ingress-proxy
    spec:
      
      containers:
      - args: ["--disable-hot-restart"]
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: INGRESS_PROXY_LABEL
          value: ingress-proxy
        image: thspinto/gloo-envoy-wrapper:1.6.8
        imagePullPolicy: IfNotPresent
        name: ingress-proxy
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-config
      volumes:
      - configMap:
          name: ingress-envoy-config
        name: envoy-config
---
# Source: gloo/templates/3-discovery-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: discovery
  name: discovery
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: discovery
  template:
    metadata:
      labels:
        gloo: discovery
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      
      serviceAccountName: discovery
      containers:
      - image: thspinto/discovery:1.6.8
        imagePullPolicy: IfNotPresent
        name: discovery
        # container security context
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: START_STATS_SERVER
            value: "true"
      # Pod security context
      securityContext:
        fsGroup: 10101
---
# Source: gloo/templates/5-gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gateway
  name: gateway
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gateway
  template:
    metadata:
      labels:
        gloo: gateway
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      
      serviceAccountName: gateway
      containers:
      - image: thspinto/gateway:1.6.8
        imagePullPolicy: IfNotPresent
        name: gateway
        ports:
          - containerPort: 8443
            name: https
            protocol: TCP

        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: START_STATS_SERVER
            value: "true"
          - name: VALIDATION_MUST_START
            value: "true"
        volumeMounts:
          - mountPath: /etc/gateway/validation-certs
            name: validation-certs
        readinessProbe:
          tcpSocket:
            port: 8443
          initialDelaySeconds: 1
          periodSeconds: 2
          failureThreshold: 10
      volumes:
        - name: validation-certs
          secret:
            defaultMode: 420
            secretName: gateway-validation-certs
---
# Source: gloo/templates/7-gateway-proxy-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: gateway-proxy
  name: gateway-proxy
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gateway-proxy
      gateway-proxy-id: gateway-proxy
  template:
    metadata:
      labels:
        gloo: gateway-proxy
        gateway-proxy-id: gateway-proxy
        gateway-proxy: live

      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8081"
        prometheus.io/scrape: "true"
    spec:
      securityContext:
        fsGroup: 10101
        runAsUser: 10101
      
      serviceAccountName: gateway-proxy
      containers:
      - args:
          - --disable-hot-restart
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: thspinto/gloo-envoy-wrapper:1.6.8
        imagePullPolicy: IfNotPresent
        name: gateway-proxy
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-config   
      volumes:
      - configMap:
          name: gateway-proxy-envoy-config
        name: envoy-config
---
# Source: gloo/templates/8-default-gateways.yaml
apiVersion: gateway.solo.io/v1
kind: Gateway
metadata:
  name: gateway-proxy
  namespace: gloo-system
  labels:
    app: gloo
spec:
  bindAddress: "::"
  bindPort: 8080
  httpGateway: {}
  useProxyProto: false
  ssl: false
  proxyNames:
  - gateway-proxy
---
# Source: gloo/templates/8-default-gateways.yaml
apiVersion: gateway.solo.io/v1
kind: Gateway
metadata:
  name: gateway-proxy-ssl
  namespace: gloo-system
  labels:
    app: gloo
spec:
  bindAddress: "::"
  bindPort: 8443
  httpGateway: {}
  useProxyProto: false
  ssl: true
  proxyNames:
  - gateway-proxy
---
# Source: gloo/templates/18-settings.yaml
apiVersion: gloo.solo.io/v1
kind: Settings
metadata:
  labels:
    app: gloo
  name: default
  namespace: gloo-system
spec:
  gloo:
    xdsBindAddr: "0.0.0.0:9977"
    restXdsBindAddr: "0.0.0.0:9976"
    enableRestEds: true
    disableKubernetesDestinations: false
    disableProxyGarbageCollection: false
  discoveryNamespace: gloo-system
  kubernetesArtifactSource: {}
  kubernetesConfigSource: {}
  kubernetesSecretSource: {}
  refreshRate: 60s

  gateway:
    readGatewaysFromAllNamespaces: false
    validation:
      proxyValidationServerAddr: gloo:9988
      alwaysAccept: true
      allowWarnings: true
  discovery:
    fdsMode: WHITELIST
---
# Source: gloo/templates/6.5-gateway-certgen-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
  name: certgen
  namespace: gloo-system
---
# Source: gloo/templates/6.5-gateway-certgen-job.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-gateway-secret-create-vwc-update-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations"]
  verbs: ["get", "update"]
---
# Source: gloo/templates/6.5-gateway-certgen-job.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-gateway-secret-create-vwc-update-gloo-system
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
subjects:
- kind: ServiceAccount
  name: certgen
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-gateway-secret-create-vwc-update-gloo-system
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/templates/6.5-gateway-certgen-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: gloo
    gloo: gateway-certgen
  name: gateway-certgen
  namespace: gloo-system
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        gloo: gateway-certgen
    spec:
      serviceAccountName: certgen
      containers:
        - image: thspinto/certgen:1.6.8
          imagePullPolicy: IfNotPresent
          name: certgen
          securityContext:
            runAsNonRoot: true
            runAsUser: 10101
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:
            - "--secret-name=gateway-validation-certs"
            - "--svc-name=gateway"
            - "--validating-webhook-configuration-name=gloo-gateway-validation-webhook-gloo-system"
      restartPolicy: OnFailure
  # this feature is still in Alpha, which means it must be manually enabled in the k8s api server
  # with --feature-gates="TTLAfterFinished=true". This flag also works with minikube start ...
  # if the feature flag is not enabled in the k8s api server, this setting will be silently ignored at creation time
  ttlSecondsAfterFinished: 60
---
# Source: gloo/templates/5-gateway-validation-webhook-configuration.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: gloo-gateway-validation-webhook-gloo-system
  labels:
    app: gloo
    gloo: gateway
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
webhooks:
- name: gateway.gloo-system.svc  # must be a domain with at least three segments separated by dots
  clientConfig:
    service:
      name: gateway
      namespace: gloo-system
      path: "/validation"
    caBundle: "" # update manually or use certgen job
  rules:
  - operations: [ "CREATE", "UPDATE", "DELETE" ]
    apiGroups: ["gateway.solo.io"]
    apiVersions: ["v1"]
    resources: ["*"]
  sideEffects: None
  failurePolicy: Ignore
